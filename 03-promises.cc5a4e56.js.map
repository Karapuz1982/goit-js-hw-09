{"mappings":"iiBAAC,IAAAA,EAAAC,EAAA,SAwCD,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAhDMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAEN,IAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAErCT,EAAQgB,SAASH,EAAWI,OAC5BC,EAAOF,SAASF,EAAUG,OAC1BE,EAASH,SAASD,EAAYE,OAEpC,GAAIG,MAAMpB,IAAUoB,MAAMF,IAASE,MAAMD,GAEvC,YADAE,EAAAzB,GAAS0B,OAAOC,QAAQ,+BAO5B,SAAwBJ,EAAQnB,EAAOkB,GACrC,IAAK,IAAIM,EAAI,EAAGA,EAAIL,EAAQK,IAAK,CAI/B1B,EAHiB0B,EAAI,EACAxB,EAAQwB,EAAIN,GAG9BO,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAU4B,EAAKD,EAAL1B,MACjBqB,EAAAzB,GAAS0B,OAAOM,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAANF,EAAM,M,IAEvEG,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAU4B,EAAKD,EAAL1B,MAClBqB,EAAAzB,GAAS0B,OAAOC,QAAQ,sBAAqCM,OAAf9B,EAAS,QAAY8B,OAANF,EAAM,M,KAbzEI,CAAeZ,EAAQnB,EAAOkB,E","sources":["src/js/03-promises.js"],"sourcesContent":[" import Notiflix from \"notiflix\";\n\nconst form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector(\"input[name='delay']\");\n  const stepInput = document.querySelector(\"input[name='step']\");\n  const amountInput = document.querySelector(\"input[name='amount']\");\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n    Notiflix.Notify.failure(\"Please enter valid numbers\");\n    return;\n  }\n\n  createPromises(amount, delay, step);\n}\n\nfunction createPromises(amount, delay, step) {\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const promiseDelay = delay + i * step;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","i","then","param","_$delay","success","concat","catch","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.cc5a4e56.js.map"}